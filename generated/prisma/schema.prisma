// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  isAdmin       Boolean   @default(false)
  access_token  String?
  expires_at    String?
  refresh_token String?
  airtable_pat  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  projects      Project[]
}

model Project {
  id                   String       @id @default(cuid())
  ownerId              String
  name                 String
  description          String?
  airtable_base_id     String
  airtable_approval_id String
  airtable_grant_id    String
  merchant_locks       String[]     @default([])
  category_locks       String[]     @default([])
  keyword_lock         String?
  grant_purpose        String?
  grantAmount          Int
  organization         String
  airtable_table       String
  airtable_view        String
  active               Boolean      @default(true)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now()) @updatedAt
  automations          Automation[]
  owner                User         @relation(fields: [ownerId], references: [id])
}

model Automation {
  id            String   @id @default(cuid())
  recieverName  String
  recieverEmail String
  recieverId    String
  projectId     String
  grantId       String?
  name          String   @default("Automation")
  type          String   @default("Scheduled")
  createdAt     DateTime @default(now())
  errorMessage  String?
  status        String
  updatedAt     DateTime @default(now()) @updatedAt
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
